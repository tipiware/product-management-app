{"ast":null,"code":"import axios from \"axios\";\nimport Config from \"./Config\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nclass AuthHandler {\n  static login(username, password, callback) {\n    axios.post(Config.loginUrl, {\n      username: username,\n      password: password\n    }).then(function (response) {\n      if (response.status === 200) {\n        reactLocalStorage.set(\"token\", response.data.access);\n        reactLocalStorage.set(\"refresh\", response.data.refresh);\n        callback({\n          error: false,\n          message: \"Login Successfull...\"\n        });\n      }\n    }).catch(function (error) {\n      callback({\n        error: true,\n        message: \"Error During Login Invalid Login Details..\"\n      });\n    });\n  }\n  static loggedIn() {\n    if (reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static getLoginToken() {\n    return reactLocalStorage.get(\"token\");\n  }\n  static getRefreshToken() {\n    return reactLocalStorage.get(\"refresh\");\n  }\n  static logoutUser() {\n    reactLocalStorage.remove(\"token\");\n    reactLocalStorage.remove(\"refresh\");\n  }\n  static checkTokenExpiry() {\n    var expire = false;\n    var token = this.getLoginToken();\n    var tokenArray = token.split(\".\");\n    var jwt = JSON.parse(atob(tokenArray[1]));\n    if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {\n      expire = jwt.exp * 1000;\n    } else {\n      expire = false;\n    }\n    if (!expire) {\n      return false;\n    }\n    return Date.now() > expire;\n  }\n}\nexport default AuthHandler;","map":{"version":3,"names":["axios","Config","reactLocalStorage","AuthHandler","login","username","password","callback","post","loginUrl","then","response","status","set","data","access","refresh","error","message","catch","loggedIn","get","getLoginToken","getRefreshToken","logoutUser","remove","checkTokenExpiry","expire","token","tokenArray","split","jwt","JSON","parse","atob","exp","Number","isFinite","Date","now"],"sources":["/home/manchuria/man/customer-management-application/client/src/utils/AuthHandler.js"],"sourcesContent":["import axios from \"axios\";\nimport Config from \"./Config\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\n\nclass AuthHandler {\n  static login(username, password, callback) {\n    axios\n      .post(Config.loginUrl, { username: username, password: password })\n      .then(function (response) {\n        if (response.status === 200) {\n          reactLocalStorage.set(\"token\", response.data.access);\n          reactLocalStorage.set(\"refresh\", response.data.refresh);\n          callback({ error: false, message: \"Login Successfull...\" });\n        }\n      })\n      .catch(function (error) {\n        callback({\n          error: true,\n          message: \"Error During Login Invalid Login Details..\",\n        });\n      });\n  }\n\n  static loggedIn() {\n    if (reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static getLoginToken() {\n    return reactLocalStorage.get(\"token\");\n  }\n\n  static getRefreshToken() {\n    return reactLocalStorage.get(\"refresh\");\n  }\n\n  static logoutUser() {\n    reactLocalStorage.remove(\"token\");\n    reactLocalStorage.remove(\"refresh\");\n  }\n\n  static checkTokenExpiry() {\n    var expire = false;\n    var token = this.getLoginToken();\n    var tokenArray = token.split(\".\");\n    var jwt = JSON.parse(atob(tokenArray[1]));\n    if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {\n      expire = jwt.exp * 1000;\n    } else {\n      expire = false;\n    }\n\n    if (!expire) {\n      return false;\n    }\n\n    return Date.now() > expire;\n  }\n}\n\nexport default AuthHandler;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,iBAAiB,QAAQ,sBAAsB;AAExD,MAAMC,WAAW,CAAC;EAChB,OAAOC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACzCP,KAAK,CACFQ,IAAI,CAACP,MAAM,CAACQ,QAAQ,EAAE;MAAEJ,QAAQ,EAAEA,QAAQ;MAAEC,QAAQ,EAAEA;IAAS,CAAC,CAAC,CACjEI,IAAI,CAAC,UAAUC,QAAQ,EAAE;MACxB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3BV,iBAAiB,CAACW,GAAG,CAAC,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,MAAM,CAAC;QACpDb,iBAAiB,CAACW,GAAG,CAAC,SAAS,EAAEF,QAAQ,CAACG,IAAI,CAACE,OAAO,CAAC;QACvDT,QAAQ,CAAC;UAAEU,KAAK,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAuB,CAAC,CAAC;MAC7D;IACF,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUF,KAAK,EAAE;MACtBV,QAAQ,CAAC;QACPU,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;EAEA,OAAOE,QAAQA,CAAA,EAAG;IAChB,IAAIlB,iBAAiB,CAACmB,GAAG,CAAC,OAAO,CAAC,IAAInB,iBAAiB,CAACmB,GAAG,CAAC,SAAS,CAAC,EAAE;MACtE,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;EAEA,OAAOC,aAAaA,CAAA,EAAG;IACrB,OAAOpB,iBAAiB,CAACmB,GAAG,CAAC,OAAO,CAAC;EACvC;EAEA,OAAOE,eAAeA,CAAA,EAAG;IACvB,OAAOrB,iBAAiB,CAACmB,GAAG,CAAC,SAAS,CAAC;EACzC;EAEA,OAAOG,UAAUA,CAAA,EAAG;IAClBtB,iBAAiB,CAACuB,MAAM,CAAC,OAAO,CAAC;IACjCvB,iBAAiB,CAACuB,MAAM,CAAC,SAAS,CAAC;EACrC;EAEA,OAAOC,gBAAgBA,CAAA,EAAG;IACxB,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAIC,KAAK,GAAG,IAAI,CAACN,aAAa,CAAC,CAAC;IAChC,IAAIO,UAAU,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IACjC,IAAIC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,IAAIE,GAAG,IAAIA,GAAG,CAACI,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAACN,GAAG,CAACI,GAAG,CAAC,EAAE;MAC9CR,MAAM,GAAGI,GAAG,CAACI,GAAG,GAAG,IAAI;IACzB,CAAC,MAAM;MACLR,MAAM,GAAG,KAAK;IAChB;IAEA,IAAI,CAACA,MAAM,EAAE;MACX,OAAO,KAAK;IACd;IAEA,OAAOW,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGZ,MAAM;EAC5B;AACF;AAEA,eAAexB,WAAW"},"metadata":{},"sourceType":"module"}