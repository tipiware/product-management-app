{"ast":null,"code":"exports.reactLocalStorage = {\n  set: function (key, value) {\n    localStorage[key] = value;\n    return localStorage[key];\n  },\n  get: function (key, defaultValue = undefined, silent = true) {\n    var value = localStorage[key] || defaultValue;\n\n    // if silent=false throw error\n    if (!silent && !value) throw key + \" not found in localStorage\";\n    return value;\n  },\n  setObject: function (key, value) {\n    localStorage[key] = JSON.stringify(value);\n    return localStorage[key];\n  },\n  getObject: function (key, defaultValue = {}, silent = true) {\n    value = this.get(key, JSON.stringify(defaultValue), silent);\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      // will raise error for parsing\n      if (!silent) throw 'Error in parsing value';\n    }\n  },\n  clear: function () {\n    return localStorage.clear();\n  },\n  remove: function (key) {\n    return localStorage.removeItem(key);\n  }\n};","map":{"version":3,"names":["exports","reactLocalStorage","set","key","value","localStorage","get","defaultValue","undefined","silent","setObject","JSON","stringify","getObject","parse","e","clear","remove","removeItem"],"sources":["/home/manchuria/man/customer-management-application/client/node_modules/reactjs-localstorage/react-localstorage.js"],"sourcesContent":["exports.reactLocalStorage = {\n    set: function(key, value) {\n        localStorage[key] = value;\n        return localStorage[key];\n    },\n    get: function(key, defaultValue=undefined, silent=true) {\n        var value = localStorage[key] || defaultValue;\n\n        // if silent=false throw error\n        if(!silent && !value)\n            throw key + \" not found in localStorage\";\n\n        return value;\n    },\n    setObject: function(key, value) {\n        localStorage[key] = JSON.stringify(value);\n        return localStorage[key];\n    },\n    getObject: function(key, defaultValue={}, silent=true) {\n        value = this.get(key, JSON.stringify(defaultValue), silent);\n\n        try{\n            return JSON.parse(value);\n        } catch(e) {\n            // will raise error for parsing\n            if(!silent)\n                throw 'Error in parsing value'\n        }\n    },\n    clear: function() {\n        return localStorage.clear();\n    },\n    remove: function(key) {\n        return localStorage.removeItem(key);\n    },\n}\n"],"mappings":"AAAAA,OAAO,CAACC,iBAAiB,GAAG;EACxBC,GAAG,EAAE,SAAAA,CAASC,GAAG,EAAEC,KAAK,EAAE;IACtBC,YAAY,CAACF,GAAG,CAAC,GAAGC,KAAK;IACzB,OAAOC,YAAY,CAACF,GAAG,CAAC;EAC5B,CAAC;EACDG,GAAG,EAAE,SAAAA,CAASH,GAAG,EAAEI,YAAY,GAACC,SAAS,EAAEC,MAAM,GAAC,IAAI,EAAE;IACpD,IAAIL,KAAK,GAAGC,YAAY,CAACF,GAAG,CAAC,IAAII,YAAY;;IAE7C;IACA,IAAG,CAACE,MAAM,IAAI,CAACL,KAAK,EAChB,MAAMD,GAAG,GAAG,4BAA4B;IAE5C,OAAOC,KAAK;EAChB,CAAC;EACDM,SAAS,EAAE,SAAAA,CAASP,GAAG,EAAEC,KAAK,EAAE;IAC5BC,YAAY,CAACF,GAAG,CAAC,GAAGQ,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC;IACzC,OAAOC,YAAY,CAACF,GAAG,CAAC;EAC5B,CAAC;EACDU,SAAS,EAAE,SAAAA,CAASV,GAAG,EAAEI,YAAY,GAAC,CAAC,CAAC,EAAEE,MAAM,GAAC,IAAI,EAAE;IACnDL,KAAK,GAAG,IAAI,CAACE,GAAG,CAACH,GAAG,EAAEQ,IAAI,CAACC,SAAS,CAACL,YAAY,CAAC,EAAEE,MAAM,CAAC;IAE3D,IAAG;MACC,OAAOE,IAAI,CAACG,KAAK,CAACV,KAAK,CAAC;IAC5B,CAAC,CAAC,OAAMW,CAAC,EAAE;MACP;MACA,IAAG,CAACN,MAAM,EACN,MAAM,wBAAwB;IACtC;EACJ,CAAC;EACDO,KAAK,EAAE,SAAAA,CAAA,EAAW;IACd,OAAOX,YAAY,CAACW,KAAK,CAAC,CAAC;EAC/B,CAAC;EACDC,MAAM,EAAE,SAAAA,CAASd,GAAG,EAAE;IAClB,OAAOE,YAAY,CAACa,UAAU,CAACf,GAAG,CAAC;EACvC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}